# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
pr: none

pool:
  vmImage: ubuntu-20.04

container:
  image: debian:bullseye
  options:  "--name ci-container -v /usr/bin/docker:/tmp/docker:ro"

steps:
- script: |
    /tmp/docker exec -t -u 0 ci-container \
    sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
  displayName: 'Install Sudo in container'
- script: |
    sudo apt-get update
    sudo apt-get install -y cmake git make build-essential quilt debhelper bc python3 python3-pip sudo libssl-dev libgcc-10-dev
    sudo apt-get install -y openssl libssl-dev libssl1.1
    sudo apt-get install -y dh-exec dh-runit libaudit-dev libedit-dev libfido2-dev libgtk-3-dev libkrb5-dev
    sudo apt-get install -y libwrap-dev pkg-config
    sudo apt-get install -y libpam-dev libselinux1-dev libsystemd-dev libwrap0-dev
    mkdir -p $(Pipeline.Workspace)/target
  displayName: 'Install packages'
- checkout: self
  submodules: true
- script: |
    cd src/SymCrypt
    sudo pip3 install -r scripts/requirements.txt
    mkdir bin
    cd bin
    cmake .. -DCMAKE_TOOLCHAIN_FILE=../cmake-toolchain/LinuxUserMode-AMD64.cmake
    cmake --build .
  displayName: 'Build SymCrypt'
- script: |
    cd src/SymCrypt-OpenSSL
    sudo mkdir -p $HOME
    sudo chown $USER $HOME
    ln -s $(System.DefaultWorkingDirectory)/src/SymCrypt ~/SymCrypt
    cp $(System.DefaultWorkingDirectory)/src/SymCrypt/bin/module/AMD64/LinuxUserMode/libsymcrypt.so ./
    mkdir bin
    cd bin
    cmake .. -DCMAKE_TOOLCHAIN_FILE=../cmake-toolchain/LinuxUserMode-AMD64.cmake
    cmake --build .
  displayName: 'Build SymCrypt-OpenSSL'
- script: |
    sudo cp $(System.DefaultWorkingDirectory)/src/SymCrypt/bin/module/AMD64/LinuxUserMode/libsymcrypt.so /usr/lib/x86_64-linux-gnu/
    sudo cp $(System.DefaultWorkingDirectory)/src/SymCrypt-OpenSSL/bin/SymCryptEngine/dynamic/libsymcryptengine.so /usr/lib/x86_64-linux-gnu/
    ld --verbose | grep SEARCH_DIR
    ls /usr/lib/x86_64-linux-gnu/
  displayName: 'Install Symcrypt'
- script: |
    cd src/openssh
    export QUILT_PATCHES=../openssh.patch
    export QUILT_REFRESH_ARGS="-p ab --no-timestamps --no-index"
    quilt push -a
    LIBS="-lsymcryptengine -lsymcrypt -lcrypto -lssl -ledit" DEB_BUILD_PROFILES="noudeb" DEB_BUILD_OPTIONS="nocheck nostrip"  DEB_CFLAGS_APPEND="-DUSE_SYMCRYPT_ENGINE"  dpkg-buildpackage -b -rfakeroot -us -uc
  displayName: 'Build Openssh'
- script: |
    cp $(System.DefaultWorkingDirectory)/src/*.deb ./
    cp $(System.DefaultWorkingDirectory)/src/SymCrypt/bin/module/AMD64/LinuxUserMode/libsymcrypt.so ./
    cp $(System.DefaultWorkingDirectory)/src/SymCrypt-OpenSSL/bin/SymCryptEngine/dynamic/libsymcryptengine.so ./
  workingDirectory: $(Pipeline.Workspace)/target
  displayName: 'Copy packages'
- publish: $(Pipeline.Workspace)/target
  artifact: fips-symcrypt
  displayName: "Archive packages"
