# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
pr: none

pool:
  vmImage: ubuntu-20.04

container:
  image: debian:buster
  options:  "--name ci-container -v /usr/bin/docker:/tmp/docker:ro"


resources:
 repositories:
   - repository: SymCrypt
     type: github
     name: microsoft/SymCrypt
     ref: refs/heads/master
     endpoint: build
   - repository: SymCrypt-OpenSSL
     type: github
     name: microsoft/SymCrypt-OpenSSL
     ref: refs/heads/main
     endpoint: build

steps:
- script: |
    /tmp/docker exec -t -u 0 ci-container \
    sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
  displayName: 'Install Sudo in container'
- script: |
    whoami
    groups
    sudo apt-get update
    sudo apt-get install cmake git make build-essential quilt debhelper bc python3 python3-pip sudo libssl-dev libgcc-8-dev -y
    echo 'deb http://deb.debian.org/debian buster-backports main' | sudo tee /etc/apt/sources.list.d/buster-backports.list
    sudo apt-get update
    sudo apt-get -t buster-backports install cmake -y
  displayName: 'Install packages'
- checkout: SymCrypt
  path: SymCrypt
- checkout: SymCrypt-OpenSSL
  path: SymCrypt-OpenSSL
- script: |
    git clone -b debian/openssl-1.1.1k-1 https://salsa.debian.org/debian/openssl.git openssl
    cd openssl-debian
    dpkg-buildpackage -b -rfakeroot -us -uc
  workingDirectory: $(Pipeline.Workspace)
  displayName: 'Build OpenSSL'
- script: |
    sudo dpkg -i libssl1.1_*.deb
    sudo dpkg -i libssl-dev_*.deb
    sudo dpkg -i openssl_*.deb
  workingDirectory: $(Pipeline.Workspace)
  displayName: 'Install OpenSSL'
- script: |
    sudo pip3 install -r scripts/requirements.txt
    mkdir bin
    cd bin
    cmake .. -DCMAKE_TOOLCHAIN_FILE=../cmake-toolchain/LinuxUserMode-AMD64.cmake
    make _rdseed64_step=__builtin_ia32_rdseed_di_step
  workingDirectory: $(Pipeline.Workspace)/SymCrypt
  displayName: 'Build SymCrypt'
- script: |
    cp $(Pipeline.Workspace)/SymCrypt/bin/module/AMD64/LinuxUserMode/libsymcrypt.so ./
    cmake .
    make
  workingDirectory: $(Pipeline.Workspace)/SymCrypt-OpenSSL
  displayName: 'Build SymCrypt-OpenSSL'
- script: |
    cp $(Pipeline.Workspace)/*.deb ./
    cp $(Pipeline.Workspace)/SymCrypt/bin/module/AMD64/LinuxUserMode/libsymcrypt.so ./
    cp $(Pipeline.Workspace)/SymCrypt-OpenSSL/SymCryptEngine/dynamic/libsymcryptengine.so ./
  workingDirectory: $(Pipeline.Workspace)/target
  displayName: 'Copy packages'
- publish: $(Pipeline.Workspace)/target
  artifact: fips-symcrypt
  displayName: "Archive packages"
